// Generated by CoffeeScript 1.7.1
var Input;

Input = {
  setup: function() {
    game.input.keyboard.on(gf.Keyboard.KEY.W, Input.up);
    game.input.keyboard.on(gf.Keyboard.KEY.S, Input.down);
    game.input.keyboard.on(gf.Keyboard.KEY.A, Input.left);
    return game.input.keyboard.on(gf.Keyboard.KEY.D, Input.right);
  },
  up: function(e) {
    return Input.doMove('n', e.down);
  },
  down: function(e) {
    return Input.doMove('s', e.down);
  },
  left: function(e) {
    return Input.doMove('w', e.down);
  },
  right: function(e) {
    return Input.doMove('e', e.down);
  },
  doMove: function(direction, keyDown) {
    var Keys, c, k, m, setvel, v, _ref, _ref1;
    c = Characters.store['player'];
    setvel = function(x, y) {
      var v;
      v = new gf.Vector(x, y);
      c.velocity = v;
      return c.setVelocity(v);
    };
    if (keyDown) {
      c.keysDown[direction] = true;
      m = c.movespeed;
      _ref = c.keysDown;
      for (k in _ref) {
        v = _ref[k];
        if (v === true && k !== direction[0]) {
          if (k === 'n') {
            if (direction[0] !== 's') {
              direction = 'n' + direction[0];
            }
          }
          if (k === 's') {
            if (direction[0] !== 'n') {
              direction = 's' + direction[0];
            }
          }
          if (k === 'w') {
            if (direction[0] !== 'e') {
              direction = direction[0] + 'w';
            }
          }
          if (k === 'e') {
            if (direction[0] !== 'w') {
              direction = direction[0] + 'e';
            }
          }
        }
      }
      switch (direction) {
        case "n":
          setvel(0, -m);
          break;
        case "s":
          setvel(0, m);
          break;
        case "e":
          setvel(m, 0);
          break;
        case "w":
          setvel(-m, 0);
          break;
        case 'nw':
          setvel(-m, -m);
          break;
        case 'ne':
          setvel(m, -m);
          break;
        case 'sw':
          setvel(-m, m);
          break;
        case 'se':
          setvel(m, m);
      }
      if (c.direction !== direction) {
        c.goto(1, direction).play();
      }
      return c.direction = direction;
    } else {
      switch (direction) {
        case "n":
          setvel(c.velocity.x, 0);
          break;
        case "s":
          setvel(c.velocity.x, 0);
          break;
        case "e":
          setvel(0, c.velocity.y);
          break;
        case "w":
          setvel(0, c.velocity.y);
      }
      c.keysDown[direction] = false;
      Keys = false;
      _ref1 = c.keysDown;
      for (k in _ref1) {
        v = _ref1[k];
        if (v) {
          Keys = k;
          break;
        }
      }
      if (Keys) {
        c.goto(1, Keys).play();
      } else {
        c.goto(1, direction).stop();
      }
      return c.direction = false;
    }
  }
};
